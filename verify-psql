#!/bin/bash

# Author: Jesse Wood 
# Date: 2020-10-09

# This script performs validation on the results of our pg_dump.
# It gets the tables for each database in the previous server.
# Performs a count operation. And compares the previous to the new.
# The script can handle table names that include whitespaces.

# The IP address for the old server
WMS='192.168.17.82'


# Optional arguements to specify a different postgres IP address to check.
while getopts :o: option
do
  case "${option}"
  in
    o) WMS=${OPTARG};;
    ?) echo "No -${OPTARG} agrument found.";;
  esac
done


# Returns a list of the databses in the old WMS server.
get_databases () 
{
  DBS=`psql -l -At -h $WMS | grep -v "=" | cut -f1 -d "|"`
}

# Returns a list of the tables that belong to a database.
# $1 - Name of the database
get_tables () 
{
  # Retrieve a list of all the relations for a given database 
  # Extract the name of the table from that result 
  # Remove whitespaces from the start of that string.
  # Remove trailing whitespaces.	
  TABLES=`psql -h $WMS -d $1 -c "\dt;" | 
	  grep public | 
	  cut -f2 -d "|" | 
	  sed 's/^ *//g' | 
	  sed 's/[ \t]*$//'`
}

# Performs a count operation on a table in a database 
# $1 - Host
# $2 - Database 
# $3 - Table 

get_old_count () 
{
  OLD=`psql -h $1 -d $2 -c "select count(*) from \"$3\"" | sed -n 3p`
}

# Performs a count operation on a table in a database 
# $1 - Database 
# $2 - Table 

get_new_count () 
{
  NEW=`psql -d $1 -c "select count(*) from \"$2\"" | sed -n 3p`
}

# Displays a context sensitive error message
# $1 - Database 
# $2 - Table 
# $3 - Count result for old server 
# $4 - Count result for new database
error_message() 
{
  echo -e "Database: $1, Table: $2\n, Old: $3 != New: $4\n"
}

get_databases

for DB in $DBS; do

  get_tables $DB 
  IFS=$'\n'
  for TBL in $TABLES; do 
    
    get_old_count $WMS $DB $TBL
    get_new_count $DB $TBL
    
    if [[ $OLD != $NEW ]]
    then
      error_message $DB $TBL $OLD $NEW
    fi
  done 
  unset IFS 
done
